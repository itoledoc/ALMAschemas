/*
 * ALMA - Atacama Large Millimeter Array
 * (c) European Southern Observatory, 2002
 * (c) Associated Universities Inc., 2002
 * Copyright by ESO (in the framework of the ALMA collaboration),
 * Copyright by AUI (in the framework of the ALMA collaboration),
 * All rights reserved.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY, without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston,
 * MA 02111-1307  USA
 *
 * $Id: SchedulingArray.idl,v 1.13 2012/05/09 23:32:35 javarias Exp $
 */

#ifndef _SCHEDULINGARRAY_IDL_
#define _SCHEDULINGARRAY_IDL_

#include <acserr.idl>
#include <acscommon.idl>
#include <acscomponent.idl>
#include <SchedulingTypes.idl>
#include <SchedulingExceptions.idl>
#include <SchedulingArrayExceptions.idl>

#include <asdmIDLTypes.idl>

#pragma prefix "alma"

module scheduling {

  /**
   * Inside the Array component, a thread executes SchedBlocks as soon
   * they are available in a queue.
   * This callback reports state changes in the execution.
   */
  interface SchedBlockExecutionCallback : ACS::OffShoot {

    /**
     * Report a change of status in a SB execution.
     */
    oneway void report(in SchedBlockQueueItem item,
		       in string newState,
		       in ACSErr::Completion compl);
  };

  /**
   * Inside the Array component, a queue is used to hold the SchedBlocks
   * scheduled for execution. This callback reports changes in the queue.
   */
  interface SchedBlockQueueCallback : ACS::OffShoot {
    /**
     * Report a change in the SB queue.
     */
    oneway void report(in ACS::Time timestamp,
		       in QueueOperation operation,
		       in SchedBlockUIDSeq uids,
		       in string newState);
  };
    
  /**
   * This callback reports changes in the array that might be of
   * interest to Array GUIs - e.g. is the executor running or not.
   * 
   */
  interface ArrayGUICallback : ACS::OffShoot {
    /**
     * Report a changes in the Array status, and who did it.
     */
    oneway void report(in ArrayGUIOperation operation,
		       in string name,
		       in string role);
  };

  /**
   * Interface to manage the Array's internal SchedBlock execution queue.
   */
  interface SchedBlockQueueManager {
    void push(in SchedBlockQueueItem item);
    SchedBlockQueueItem pull();
    void moveUp(in SchedBlockQueueItem item); 
    void moveDown(in SchedBlockQueueItem item);
    void delete(in SchedBlockQueueItem item);
    SchedBlockQueueItemSeq getQueue();
    long getQueueCapacity();
    void addMonitorQueue(in string monitorName,
			 in SchedBlockQueueCallback callback);
    void removeMonitorQueue(in string monitorName);
    SchedBlockQueueItemSeq getExecutedQueue();
  };

  /**
   * Interface to control the Array's SchedBlock execution thread.
   */
  interface SchedBlockExecutionManager {
    void start(in string name, in string role);
    void stop(in string name, in string role);
    SchedBlockUID getRunningSchedBlock()
      raises (SchedulingArrayExceptions::NoRunningSchedBlockEx);
    boolean hasRunningSchedBlock();
    void stopRunningSchedBlock(in string name,
			       in string role);
    void addMonitorExecution(in string monitorName,
			     in SchedBlockExecutionCallback callback);
    void removeMonitorExecution(in string monitorName);
    void addMonitorGUI(in string monitorName,
		       in ArrayGUICallback callback);
    void removeMonitorGUI(in string monitorName);
    boolean isRunning();  // Is the execution running or not?
    boolean isManual();   // Is the array a Manual array or not?
    boolean isFullAuto(); // Is the array in fullAuto mode or not?
    void setFullAuto(in boolean on,  // Set whether the execution is fullAuto
		     in string name, // (true) or semiAuto (false)
		     in string role);
    void destroyArray(in string name,
		      in string role);
    SchedBlockExecutionItemSeq getExecutions();
    /**
     * Method called by control when the user calls beginExecution from the CCL.
     * This method gives control the the SB id and the session id to use through
     * out the execution. It is only needed in manual mode when the user wants
     * an asdm produced. There will be a 'dummy' project with sb in the archive
     * to attach these asdms to its project status.
     */
    EntityRef startManualModeSession(in string sbid)
      raises(SchedulingExceptions::InvalidOperationEx);
  };
 
  /**
	* @brief Represents the Scheduling Array, this is the main entity which the end-user operates on.
	*
	* The Array is the entity which contains all the operations needed by the end-user,
    * but creation and destruction of Arrays which are handled by @ref Master "scheduling::Master".
	*/
  interface Array : ACS::ACSComponent,
                    SchedBlockQueueManager,
                    SchedBlockExecutionManager {
	/**
      * 
      */
    void configure(in string arrayName,
		   in ArraySchedulerModeSeq modes,
		   in ArrayDescriptor descriptor);
    ArraySchedulerModeSeq getModes();
    ArraySchedulerLifecycleType getLifecycleType();
    string getArrayName();
    ArrayDescriptor getDescriptor() raises(SchedulingExceptions::InvalidOperationEx) ;
  };

};
#endif // _SCHEDULINGARRAY_IDL_
