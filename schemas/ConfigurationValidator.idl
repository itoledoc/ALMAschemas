#ifndef CONFIGURATION_VALIDATOR_IDL
#define CONFIGURATION_VALIDATOR_IDL
/*******************************************************************************
 * ALMA - Atacama Large Millimeter Array
 * Copyright (c) AUI - Associated Universities Inc., 2011
 * (in the framework of the ALMA collaboration).
 * All rights reserved.
 * 
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA
 *******************************************************************************
 * 
 * "@(#) $Id: ConfigurationValidator.idl,v 1.7 2012/08/06 00:56:05 konakamu Exp $"
 *
 * who       when        what
 * --------  ----------  ----------------------------------------------
 * Kohji.N   2012/8/6    rename validateConfigurationSS to
 *                       validateSpectralSpec.
 * Kohji.N   2012/2/29   translateSpectralSpecXml2CorrConfigIdl raises exception
 *                       Comment for spectralSpec argument.
 */

//
// ACS stuff
//
#include <acserr.idl>
#include <acscomponent.idl>
#include <ACSErrTypeCommon.idl>
#include <xmlentity.idl>

//
// CORR stuff
//
#include <CorrConfig.idl>
#include <CorrErr.idl>

#pragma prefix "alma"

module Correlator
{
    /** BL-CORR specific: data rates generated by a given spectral specification
     ** for one base-band in that configuration.
     */
    struct DataRatesPerBasebandBL
    {
        /** Data rate through each possible DPI link in a base-band. Units are
         ** MB/sec.
         */
        ACS::floatSeq dpi;
        
        /** Data rate streaming out of each CDP node computer in a base-band. Units
         ** are MB/sec.
         */
        ACS::floatSeq cluster;
    };
    
    /** BL-CORR specific
     */
    typedef sequence<DataRatesPerBasebandBL, 4> DataRatesPerBasebandBLSeq;
    
    /** BL-CORR specific: data rates generated by a given spectral specification
     ** for all base-bands in that configuration.
     */
    struct DataRatesBL
    {
        /** Data rates through each base-band in a spectral specification for a
         ** given number of antennas.
         */
        DataRatesPerBasebandBLSeq basebands;
        
        /** Data rate from CDP master out to receivers elsewhere. Units are MB/sec.
         */
        float master;
    };

    /** BL-CORR specific: maximum DPI data rate. MB/sec.
     */
    const float dpiMaxDataRateBL = 62.5;

    /** BL_CORR specific: maximum Ethernet data rate. MB/sec.  The requirement
     ** is really 60, but 60 is inconvenient for testing purposes because just
     ** for a few byte is then not possible to exercise in stand alone
     ** configurations.
     */
    const float ethMaxDataRateBL = 70.0;

    /** This interface validates a static correlator configuration. It
     ** is used by the OT to ensure that a configuration is valid and relies
     ** on a configuration database which is maintained as an entity object of
     ** the correlator subsystem.  It is important to note that this interface
     ** is time independent in that it cannot check for availability of the
     ** correlator for a given project. This is handled by the control system
     ** as part of its subarray allocation process. The control system can use
     ** the ObservationQuery interface to determine what is the currently
     ** running correlator configuration. 
     */
    interface ConfigurationValidator : ACS::ACSComponent
    {
        /** The CCC receives a correlator configuration as an XML string of the APDM's
         ** SpectralSpec. This helper routine parses the SpectralSpec, extracts the 
         ** Correlator configuration and converts it to a CorrelatorConfiguration IDL
         ** structure for its use. The CCC can then validate the IDL and/or pass it
         ** on to the CDP Master for CDP configuration.
         ** The XML string in the spectralSpec argument should:
         **  * be a well-formed and valid XML
         **  * have a XML declaration with
         **           version="1.0"
         **           encoding="UTF-8" 
         **  * have the SpectralSpec element as a root element.
         ** Otherwise, the exception will be raised.
         */
        Correlator::CorrelatorConfiguration translateSpectralSpecXml2CorrConfigIdl(in string spectralSpec) raises(CorrErr::ErrorEx); 


        /** Simple validity check. Use this function to check if a given
         ** configuration is valid.
         ** @param corrConfigIDL Correlator configuration IDL struct to check.
         ** @param numOfAntennas Number of antennas in the subarray for this
         **	configuration
         ** @param errorStringSeq Return a sequency of string items giving error
         **	message of the correlator configuration.
         ** @return true if configuration is valid, else false
         */
        boolean validateConfiguration(
            in Correlator::CorrelatorConfiguration corrConfigIDL, 
            in long numOfAntennas, 
            out ACS::stringSeq errorStringSeq);

        /** Same as above except input is a spectral spec.
         ** The XML string in the spectralSpec argument should:
         **  * be a well-formed and valid XML
         **  * have a XML declaration with
         **           version="1.0"
         **           encoding="UTF-8" 
         **  * have the SpectralSpec element as a root element.
         */
        boolean validateSpectralSpec(in string spectralSpec, 
                                     in long numOfAntennas, 
                                     out ACS::stringSeq errorStringSeq);

        /** BL-CORR specific
         ** Validate a given spectral specification in XML format. The XML
         ** string in the spectralSpec argument should:
         **
         **  * be a well-formed and valid XML
         **  * have a XML declaration with
         **           version="1.0"
         **           encoding="UTF-8" 
         **  * have the SpectralSpec element as a root element.
         **
         ** This method is meant to be used for concurrent sub-arrays scheduling
         ** by the BL-CORR observation control component, CAIs and dataRates
         ** parameters are specific to the online validation that the BL-CORR
         ** needs to apply every time a sequence is to be scheduled. See
         ** ICT-2821 for details.
         */
        boolean validateSpectralSpecBL(
            in string spectralSpec, 
            in ACS::uLongSeq cais, 
            out Correlator::DataRatesBL dataRates,
            out ACS::stringSeq errorStringSeq)
            raises ( ACSErrTypeCommon::NotImplementedEx );
    };
};
#endif
