#ifndef PATHCORRRESULT_IDL
#define PATHCORRRESULT_IDL
/*******************************************************************************
 * ALMA - Atacama Large Millimeter Array
 * Copyright (c) AUI - Associated Universities Inc., 2011
 * (in the framework of the ALMA collaboration).
 * All rights reserved.
 * 
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA
 *******************************************************************************
 * 
 * "@(#) $Id: PathCorrResult.idl,v 1.3 2011/11/01 14:15:16 ramestic Exp $"
 *
 * who       when        what
 * --------  ----------  ----------------------------------------------
 */
#include <baci.idl>
#pragma prefix "alma"

module Correlator
{
    /** 1.1 PathCorrectionResult Events
     ** The telescope calibration subsystem publishes the atmospheric phase
     ** correction coefficients that the CDP uses to do path length adjustments
     ** to the spectral data. The frequency of this data is on the order of
     ** minutes. The exact format is specified by the telescope calibration
     ** subsystem, but contains the following information:
     */
    typedef double TelCalCoefficients[4];
    struct PathCorrResult
    {
        ACS::Time startTime;     //! Array time when coefficients start being valid  
        ACS::Time stopTime;      //! Array time when coefficients stop being valid  
        string scanID;           //! Scan ID for these coefficients
        short antennaNumber;     //! 1 - 64
        short frequencyBand;     //! 0-9
        short minimumFrequency;
        short maximumFrequency;
        TelCalCoefficients coefficients;  //! TelCal coefficients
    };

    typedef PathCorrResult PathCorrResult_t;

    /** \struct Center Frequency.
     ** Define the center frequencies used in the corr. configuation & PathCorrEvent
     ** data structure. This allows the mapping of center frequencies to quadrants.
     ** Also this defines which polarization ID belongs to which baseband fiber in a 
     ** pair. This is an array of 2 elements.
     */
    typedef sequence<short> PolarizationIDs_t;
    struct CenterFreq
    {
        short frequencyBand;    //! 0-9
        short quadrantID;       //! 0 -3
        PolarizationIDs_t polarizationIDs; //! pol'n index (0-1) per baseband pair
    };
    /// can have up to 4 frequency-quadrant mappings
    typedef sequence<CenterFreq> CenterFreqSeq;
};
#endif
